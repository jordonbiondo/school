* OS
** Chapter 1
*** Definition
    - Interface between user and machine
    - "An interrupt driven control program"
**** Goal:
     - Convenience for user
     - Control program
**** Purpose:
     - Efficient use of the system resources
     - Recourse Manager
*** System Model
    - CPU
    - System Bus
    - DMA: Direct Memory Access
*** Interrupts
    - Control transfers, hardware -> CPU
    - model
      | Main | -> | interrupt |    | resume |
      |------+----+-----------+----+--------|
      |      |    |           | -> |        |
**** Types:
***** Hardware 
      - Parity
***** Software 
      - Overflow
***** Trap|Exception 
      - Page Fault
**** Service
     1. Recognize
     2. Control Transfer
     3. Return state
*** Memory Hierarchy 
    | Type            | Storage | Speed  |
    |-----------------+---------+--------|
    | registers       | Low     | High   |
    | cache           |         |        |
    | electronic disk |         |        |
    | magnetic disk   |         |        |
    | optical disk    |         |        |
    | magnetic tapes  | High    | Low    |
*** Protection
**** Time   
     - Time is a resource of the CPU
     - Timers implemented
     - A program can hog the system but not monopolize it.
**** Space (memory)
     - Create fences around blocks of memory
**** Dual Mode Operation
     - Root (admin) vs User : Privileged Instructions
     - A user doesn't control, the user makes requests and the OS fulexecuteem.
       | Userland | execute a process | sys call |                      | return to process |
       |----------+-------------------+----------+----------------------+-------------------|
       | System   |                   |          | execute the sys call |                   |
***** System call interface 
      A printf call goes out to the kernel for stdout writing
      1. User application makes requests to the interface
      2. Kernel executes sys calls
      3. Returns pointer and data to interface
      4. Returns information to user process
** Chapter 2
   Management | Services : See Fig 2.1
   Modular | Layered : See Fig 2.13
** Chapter 3
*** Processes
**** Definition
     - Program in execution
     - State
     - Independent, executing entity
     - user/kernel
**** Process State
     Can describe a characteristic of a process. (Fig 3.2)
***** Process Flow
     |  action v state >  | NEW   | READY   | RUNNING    | WAITING | TERMINATED |
     |--------------------+-------+---------+------------+---------+------------|
     | admitted           | READY |         |            |         |            |
     |--------------------+-------+---------+------------+---------+------------|
     | interrupt          |       |         | READY      |         |            |
     |--------------------+-------+---------+------------+---------+------------|
     | scheduler dispatch |       | RUNNING |            |         |            |
     |--------------------+-------+---------+------------+---------+------------|
     | IO completion      |       |         |            | READY   |            |
     |--------------------+-------+---------+------------+---------+------------|
     | IO event           |       |         | WAITING    |         |            |
     |--------------------+-------+---------+------------+---------+------------|
     | exit               |       |         | TERMINATED |         |            |
***** States     
     | State           | Def                                                        |
     |-----------------+------------------------------------------------------------|
     | Ready:          | Queued, Runnable                                           |
     |-----------------+------------------------------------------------------------|
     | Running         | On the CPU                                                 |
     |-----------------+------------------------------------------------------------|
     | Blocked/Waiting | IO, Events                                                 |
     |-----------------+------------------------------------------------------------|
     | Terminated      | Orphan: parent killed.                                     |
     |                 | Zombie: parent not ready, still holds resources after kill |
**** Process Representation
     Signal Handlers
      Syscalls
      IO info - File Pointers
      Limits / Permissions
      Environment
***** PCB
      Process Control Block
      ID, State, Control
      | Process ID      | incremental, Parent ID: report back after completion                             |
      | UID             | User ID, who owns the process                                                    |
      | State           | Ready, Running, Blocked, Current program counter, stack pointer, register values |
      | Memory Info     | Pointers to page tables                                                          |
      | Scheduling Info | Priority, Usage                                                                  |
      | Accounting Info | Timers                                                                           |
      | Events          | foobar                                                                           |

**** Process Implementation
***** Process Image
      - Process Table: Keeps track of PCBs
        | PCB  | attribute | ... | ... | ...                   | ... | ... |
        |------+-----------+-----+-----+-----------------------+-----+-----|
        | PCB0 |           |     |     |                       |     |     |
        | PCB1 |           |     |     |                       |     |     |
        | PCB2 |           |     |     | (pointer to Mem info) |     |     |
        | PCB3 |           |     |     |                       |     |     |
        | PCB4 |           |     |     |                       |     |     |
        | PCB5 |           |     |     |                       |     |     |
        | PCB6 |           |     |     |                       |     |     |
      - Memory Info:
        | Stack |
        |-------|
        | v     |
        | ^     |
        |-------|
        | Heap  |
        |-------|
        | Data  |
        |-------|
        | Text  |
**** Process Operations
***** Create
      - Spawn new process
      - Parent
      - fork() function
	creates exact copy of parent process in new address space
***** Execution
      - exec() function
	Many different versions of the function
	Replaces text (code) and data areas with the new programs text and data.
	Runs the process.
***** Blocking
      - Waiting for an event
	wait(): waits for event (child process to terminate)
***** Terminate
      - conclude executions, Recover resources
      - exit() : terminate and return to wait() in parent
**** Process Scheduling
     Purpose: Efficient, Higher throughput
***** Schedule example
****** Inefficient: linear
       8 total time units
      | cpu time |   1 |  2 |   3 |  4 |   5 |  6 |   7 |  8 |
      |----------+-----+----+-----+----+-----+----+-----+----|
      | Process1 | cpu | io | cpu | io |     |    |     |    |
      |----------+-----+----+-----+----+-----+----+-----+----|
      | Process2 |     |    |     |    | cpu | io | cpu | io |

****** Efficient: scheduled
       5 total time units
      | cpu time |   1 | 2   | 3   | 4   |  5 | 6 | 7 | 8 |
      |----------+-----+-----+-----+-----+----+---+---+---|
      | Process1 | cpu | io  | cpu | io  |    |   |   |   |
      |----------+-----+-----+-----+-----+----+---+---+---|
      | Process2 |     | cpu | io  | cpu | io |   |   |   |
***** Context Switch
****** switch processes
       1. executing p0
       2. save state in pcb0
       3. reload state in pcb1
       4. execute p1
       5. save state into pcb1
       6. reload state in pcb0
       7. continue executing p1
****** Exchange Environment
****** Mechanism:
       | Type        | Description                    | Example |
       |-------------+--------------------------------+---------|
       | Interrupt   | external event                 | timer   |
       | System call | task voluntarily waits         | open()  |
       | Trap        | caused by current instructions | fault   |

**** Interprocess Communication (IPC)
***** Types
****** Shared Memory
       One process writes to a memory location and another one reads it
****** Message Passing
       Process sends message to the OS, OS handles sending it to the other process
       
	  

***** Primitives
      - Read Write
      - Send Receive
***** Addressing:
****** Direct
       Communicating with a named entity
       ex: send(process1, message)
****** Indirect
       Communicating with a services
       ex: send(service, message)
***** Naming
****** Symmetric 
       - both
****** Asymmetric
       - one
       Send(p, message)
       Recv(* &message)
	


***** Timing
****** Synchronous
       Blocking: won't continue until message sent was received
****** Asynchronous
       Buffering: will continue after a send.
       Sending is generally done asynchronously, receiving generally blocks
       Likely sending to the OS
