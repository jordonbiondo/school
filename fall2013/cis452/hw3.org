* Homework Chapter 3
  Jordon Biondo
** Questions
   - Question 3.7
     The kernel will be executing a process, we'll call it process 1. Then the kernel will save the state of this process in a pcb, let's say pcb 1. Then it will load another saved state from a different pcb, let's say pcb 2, and then begin executing the stored process, process 2. When the process is done or the kernel wishes to switch back to process 1. It will resave the state of process 2 in pcb 2 and then load process 1 from pcb 1 like it did for process 2 earlier. 
   - Question 3.9
     8 Processes total
   - Question 3.10
     - A. 0
     - B. 2603
     - C. 2603
     - D. 2600
** Practical
   - Copy process creates a new process that is a copy of another process and returns a pointer
     to the new child.
   - copy_process() copies everything from registers to the current cpu tick
     to the new process and gets it ready for execution, though copy process doesn't actually
     start the new process. There are also checks throughout the code that try to prevent
     fork bombs and perform other safetly measures. The comment on the function describes it well:

     #+BEGIN_SRC c
     /*
      * This creates a new process as a copy of the old one,
      * but does not actually start it yet.
      *
      * It copies the registers, and all the appropriate
      * parts of the process environment (as per the clone
      * flags). The actual kick-off is left to the caller.
      */
     #+END_SRC
     
    




